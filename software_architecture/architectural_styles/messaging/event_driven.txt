Event-Driven

Event-driven architecture (EDA) is a software design pattern in which 
the system reacts to specific events that occur, rather than being 
continuously polled for changes. In EDA, events are messages that are 
sent asynchronously between components, and the components react to 
the events they are interested in.
The main advantage of using EDA is that it allows for a clear separation 
of concerns between the components, and it can improve the scalability 
and fault-tolerance of the system. Additionally, it allows for loose 
coupling between components, meaning that the components are not aware 
of each otherâ€™s existence, and can be developed, deployed, and scaled 
independently.

It's important to differentiate between EDA and MDA:
- EDA: Are decoupled from their consumers. It's used to send a state
  change or ocurrence.
- MDA: Are coupled with their consumers. It's used to send a instruction
  or request.

Event-driven architecture models:
1. Pub/Sub: This is a messaging infrastructure based on subscriptions to
   an event stream.
2. Event streaming: Events are written to a log. Event consumers don't
   subscribe to an event stream. Instead, they can read from any part of
   the stream and can join the stream at any time.
