Serverless
Is a cloud-native development model that allows developers to build and run 
applications without having to manage servers.
There are still servers in serverless, but they are abstracted away from 
app development. A cloud provider handles the routine work of 
provisioning, maintaining, and scaling the server infrastructure. 
Developers can simply package their code in containers for deployment.
Once deployed, serverless apps respond to demand and automatically scale up
and down as needed.

With serverless, routine tasks such as managing the operating system and 
file system, security patches, load balancing, capacity management, 
scaling, logging, and monitoring are all offloaded to a cloud services 
provider.

Serverless computing offerings typically fall into two groups, 
- Backend-as-a-Service (BaaS): BaaS gives developers access to a variety of 
  third-party services and apps. For instance, a cloud-provider may offer 
  authentication services, extra encryption, cloud-accessible databases, 
  and high-fidelity usage data. With BaaS, serverless functions are usually 
  called through application programming interfaces (APIs).
- Function-as-a-Service (FaaS): Under FaaS, developers still write custom 
  server-side logic, but it’s run in containers fully managed by a cloud 
  services provider. In contrast to BaaS, FaaS affords a greater degree of 
  control to the developers, who create custom apps rather than relying on 
  a library of prewritten services.

Serverless architecture is ideal for asynchronous, stateless apps that can 
be started instantaneously. Likewise, serverless is a good fit for use 
cases that see infrequent, unpredictable surges in demand.

Pros
- Serverless computing can increase developer productivity and reduce 
  operational costs. By offloading the routine tasks of provisioning and 
  managing servers, developers have more time to focus on their apps. 
- It’s possible to streamline app development even further by incorporating 
  entire components from third-party BaaS offerings.
- Operational costs are reduced in a serverless model because you can pay 
  for cloud-based compute time as it’s needed, as opposed to running and 
  managing your own servers all the time.

Cons
- Not running your own server or controlling your own server-side logic can 
  have drawbacks.
- Cloud providers may have strict constraints on how their components can 
  be interacted with, in turn affecting how flexible and customized your 
  own systems can be. In the case of BaaS environments, developers may be 
  beholden to services whose code is outside their control.
- Ceding control of these aspects of your IT stack also opens you up to 
  vendor lock-in. Deciding to change providers will also likely come with 
  the cost of upgrading your systems to adhere to the new vendor’s 
  specifications.
