The role of a device driver is providing mechanism, not policy.

Most programming problems can indeed be split into two parts: “what
capabilities are to be provided” (the mechanism) and “how those capabilities can be
used” (the policy).

 write kernel code to access the hardware, but don’t force particular
policies on the user, since different users have different needs. The driver should deal
with making the hardware available, leaving all the issues about how to use the hardware to the applications.

a driver is a software layer
that lies between the applications and the actual device. This privileged role of the
driver allows the driver programmer to choose exactly how the device should appear

different drivers can offer different capabilities, even for the same device.

Policy-free drivers have a number of typical characteristics. These include support for
both synchronous and asynchronous operation, the ability to be opened multiple
times, the ability to exploit the full capabilities of the hardware, and the lack of software layers to “simplify things” or provide policy-related operations.

. You should understand, however, that
user programs are an integral part of a software package and that even policy-free
packages are distributed with configuration files that apply a default behavior to the
underlying mechanisms.

In a Unix system, several concurrent processes attend to different tasks. Each process
asks for system resources, be it computing power, memory, network connectivity, or
some other resource. The kernel is the big chunk of executable code in charge of handling all such requests. Although the distinction between the different kernel tasks
isn’t always clearly marked, the kernel’s role can be split into the following parts:

- process management: The kernel is in charge of creating and destroying 
  processes and handling their connection to input and output. 
  Communication among different processes through signals, pipes, or 
  interprocess communication primitives is basic to the overall system 
  functionality and is also handled by the kernel. In addition, the 
  scheduler, which controls how processes share the CPU, is part of process
  management. More generally, the kernel’s process management activity 
  implements the abstraction of several processes on top of a single CPU or
  a few of them.
- memory management:  The kernel builds up a virtual addressing space for 
  any and all processes on top of the limited available resources. The 
  different parts of the kernel interact with the memory-management 
  subsystem through a set of function calls, ranging from the simple 
  malloc/free pair to much more complex functionalities.
- filesystems: almost everything in Unix can be treated as a file. The 
  kernel builds a structured filesystem on top of unstructured hardware, 
  and the resulting file abstraction is heavily used throughout the whole 
  system. In addition, Linux supports multiple filesystem types, that is, 
  different ways of organizing data on the physical medium.
- device control: With the exception of the processor, memory, and a very 
  few other entities, any and all device control operations are performed 
  by code that is specific to the device being addressed. That code is 
  called a device driver. The kernel must have embedded in it a device 
  driver for every peripheral present on a system, from the hard drive to 
  the keyboard and the tape drive
- networking: Networking must be managed by the operating system, because 
  most network operations are not specific to a process: incoming packets 
  are asynchronous events. The packets must be collected, identified, and 
  dispatched before a process takes care of them. The system is in charge 
  of delivering data packets across program and network interfaces, and it
  must control the execution of programs according to their network 
  activity. Additionally, all the routing and address resolution issues are
  implemented within the kernel.

In Linux you have the ability to extend at runtime the set of features 
offered by the kernel. This means that you can add functionality to the 
kernel (and remove functionality as well) while the system is up and 
running.

Each piece of code that can be added to the kernel at runtime is called a 
module.

device driver is a class of modules.

Each module is made up of object code (not linked into a complete 
executable) that can be dynamically linked to the running kernel by the 
`insmod` program and can be unlinked by the `rmmod` program.

a module is said to belong to a specific class according to the functionality it offers.

The Linux way of looking at devices distinguishes between three fundamental device
types. Each module usually implements one of these types, and thus is classifiable as a
char module, a block module, or a network module.

the fundamental device types are:
- Character devices: A character (char) device is one that can be accessed 
  as a stream of bytes (like a file); a char driver is in charge of 
  implementing this behavior. Such a driver usually implements at least the
  open, close, read, and write system calls. The text console 
  (/dev/console) and the serial ports (/dev/ttyS0 and friends) are examples
  of char devices, as they are well represented by the stream abstraction. 
  Char devices are accessed by means of filesystem nodes, such as /dev/tty1
  and /dev/lp0. The only relevant difference between a char device and a 
  regular file is that you can always move back and forth in the regular 
  file, whereas most char devices are just data channels, which you can 
  only access sequentially. There exist, nonetheless, char devices that 
  look like data areas, and you can move back and forth in them;
- Block devices: Like char devices, block devices are accessed by 
  filesystem nodes in the /dev directory. A block device is a device 
  (e.g., a disk) that can host a filesystem. In most Unix systems, a block 
  device can only handle I/O operations that transfer one or more whole 
  blocks, which are usually 512 bytes (or a larger power of two) bytes in 
  length. Linux, instead, allows the application to read and write a block 
  device like a char device—it permits the transfer of any number of bytes
  at a time. As a result, block and char devices differ only in the way 
  data is managed internally by the kernel, and thus in the kernel/driver 
  software interface. Block drivers have a completely different interface 
  to the kernel than char drivers.
- Network interfaces: Any network transaction is made through an interface,
  that is, a device that is able to exchange data with other hosts. 
  Usually, an interface is a hardware device, but it might also be a pure 
  software device, like the loopback interface. A network interface is in 
  charge of sending and receiving data packets, driven by the network 
  subsystem of the kernel, without knowing how individual transactions map
  to the actual packets being transmitted. A network driver knows nothing 
  about individual connections; it only handles packets.
  Not being a stream-oriented device, a network interface isn’t easily 
  mapped to a node in the filesystem, as /dev/tty1 is. The Unix way to 
  provide access to interfaces is still by assigning a unique name to them
  (such as eth0), but that name doesn’t have a corresponding entry in the 
  filesystem. Communication between the kernel and a network device driver
  is completely different from that used with char and block drivers. 
  Instead of read and write, the kernel calls functions related to packet 
  transmission.

There are other ways of classifying driver modules that are orthogonal to 
the above device types. In general, some types of drivers work with 
additional layers of kernel support functions for a given type of device.
