CAP Theorem - (Consistency, Availability, Partition tolerance)
According to the CAP theorem, any distributed system can only guarantee two of 
the three properties at any time. You can't guarantee all three properties at 
once.
A distributed system is a network that stores data on more than one node 
(physical or virtual machines) at the same time. Because all cloud applications 
are distributed systems, it’s essential to understand the CAP theorem when 
designing a cloud app so that you can choose a data management system that 
delivers the characteristics your application needs most.
In the majority of the time, all three can be provided. But, in the event of a 
network failure, a choice must be made.
In the theorem, partition tolerance is a must. The assumption is that the 
system operates on a distributed data store so the system, by nature, operates 
with network partitions. Network failures will happen, so to offer any kind of 
reliable service, partition tolerance is necessary
Consistency in CAP is different than that of ACID. Consistency in CAP means 
having the most up-to-date information. (ACID refers to a different database 
event. In ACID, consistency means any new transaction to the database won’t 
corrupt the database.)
Also note that availability as defined in CAP theorem is different from high 
availability in software architecture.

CAP:
- Consistency: All clients see the same data at the same time, no matter which 
node they connect to. For this to happen, whenever data is written to one node, 
it must be instantly forwarded or replicated to all the other nodes in the 
system before the write is deemed ‘successful.’

- Availability: Any client making a request for data gets a response, even if 
one or more nodes are down. Another way to state this — all working nodes in 
the distributed system return a valid response for any request, without 
exception.

- Partition tolerance: A partition is a communication break within a 
distributed system — a lost or temporarily delayed connection between two nodes. 
Partition tolerance means that the cluster must continue to work despite any 
number of communication breakdowns between nodes in the system.

NoSQL databases are ideal for distributed network applications. Unlike their 
vertically scalable SQL (relational) counterparts, NoSQL databases are 
horizontally scalable and distributed by design—they can rapidly scale across a 
growing network consisting of multiple interconnected nodes.

Today, NoSQL databases are classified based on the two CAP characteristics they 
support:
- CP database: Delivers consistency and partition tolerance at the expense of 
  availability. When a partition occurs between any two nodes, the system has 
  to shut down the non-consistent node (i.e., make it unavailable) until the 
  partition is resolved.
- AP database: Delivers availability and partition tolerance at the expense of 
  consistency. When a partition occurs, all nodes remain available but those at 
  the wrong end of a partition might return an older version of data than others. 
  (When the partition is resolved, the AP databases typically resync the nodes 
  to repair all inconsistencies in the system.)
- CA database: Delivers consistency and availability across all nodes. It can’t 
  do this if there is a partition between any two nodes in the system, however, 
  and therefore can’t deliver fault tolerance.

"The modern CAP goal should be to maximize combinations of consistency and 
availability that make sense for the specific application. Such an approach 
incorporates plans for operation during a partition and for recovery afterward."
Eric Brewer - Initial positor of the CAP Theorem.
