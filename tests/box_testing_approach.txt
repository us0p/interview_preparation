White box testing

White box testing involves testing the internal workings of a software 
application by examining its source code, algorithms, and data structures.
Test cases are designed based on knowledge of the internal structure, 
allowing testers to target specific paths, branches, and conditions within 
the code.
White box testing aims to verify that the software behaves correctly at the 
code level, ensuring that all possible paths are executed, and that the 
internal logic and flow are correct.

What is WBT used for?
- Achieve high code coverage, ensuring that most part of the code are executed
  durint tests.
- Validation of internal logic. It helps ensure that the software behaves 
  correctly according to the specified logic.

Techniques used in WBT:
- Statement coverage - validates if every statement of the code is executed at 
  least once.
- Branch coverage a.k.a. Decision coverage - validate whether each branch 
  (if-else statements) is executed at least once.
- Path coverage - focuses on testing all possible paths or sequences of 
  executed statements through the code. A path is typically defined by the 
  sequence of decisions or branches taken in the code, such as if-else statements, 
  loops, and conditional statements.

Black box testing

In black box testing, the tester focuses solely on the external behavior and 
functionality of the software without considering its internal workings.
The tester interacts with the software as an end-user would, providing inputs 
and examining outputs, without knowledge of the underlying code or algorithms.
Black box testing aims to validate that the software meets functional 
requirements, behaves as expected, and delivers the desired outputs for 
various inputs.

What is BBT used for?

- Interface Testing: Black box testing is useful for testing interfaces, such 
  as APIs, to ensure they produce the expected outputs for different inputs.
- End-to-End Testing: Black box testing can be applied to end-to-end testing, 
  where the entire system is tested as a whole to ensure all components work 
  together correctly.
- User Acceptance Testing (UAT): Black box testing is commonly used in UAT to 
  ensure the software meets the user's requirements and expectations.

Techniques used in BBT:
- Equivalence partitioning - input values to the system are divided into different
  classes based on the similarity of the outcome. Thus, we can use one value of
  each class to test the outcome, this helps reduce the amount of rework.
- Boundary value analysis - focus on the values at boundaries, referring to values
  at the limit where the system changes, we should consider both valid and invalid
  values on both ends.
