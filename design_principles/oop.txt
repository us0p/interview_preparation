OOP (Object Oriented Programing)

Is a programing paradigm that is based on the concepts of "objects", which
are instances of a class. In OOP a class is a blueprint for creating objects,
which have both attributes and methods. The main idea is to model real-world
objects and their interaction, making it well-suited for creating complex and
large-scale software systems.

Inheritance:
Inheritance is a fundamental concept in object-oriented programming (OOP) that 
allows a new class to inherit the properties and methods of an existing class. 
The class that is inherited from is called the parent or super class, while the 
class that inherits is called the child or sub class. Inheritance enables code 
reuse, where a child class can inherit the properties and methods of its parent 
class and potentially add or override them. The main advantage of inheritance is 
that it allows for a clean and organized way to reuse code and share functionality 
among classes.

Polymorphism:
Polymorphism is a concept in object-oriented programming (OOP) that allows objects 
of different classes to be treated as objects of a common parent class. This is 
achieved by defining a common interface for all classes that need to be treated 
polymorphically.

There are two types of polymorphism:
 - Compile-time polymorphism occurs when the type of the object that is going to be 
   acted upon is determined at compile-time. This is achieved through method overloading, 
   which allows multiple methods to have the same name but different parameters within 
   the same class.
 - Run-time polymorphism occurs when the type of the object is determined at run-time. 
   This is achieved through method overriding, which allows a child class to provide a 
   specific implementation of a method that is already defined in its parent class.

Abstraction:
Abstraction is a concept in object-oriented programming (OOP) that refers to the process 
of hiding the implementation details of an object and exposing only its essential features. 
It enables the use of objects without the need to understand the underlying complexity of 
their internal structure and behavior.

Encapsulation:
Encapsulation is a concept in object-oriented programming (OOP) that refers to the practice 
of wrapping an object’s internal data and behavior within a defined interface, and hiding 
the implementation details from the outside world. It is one of the fundamental concepts of 
OOP and is closely related to the concepts of data hiding and information hiding.
Encapsulation is achieved by using access modifiers (such as “public,” “private,” and “protected”) 
to control the visibility and accessibility of an object’s data and methods. For example, 
data members of a class can be declared as private, which means they can only be accessed by 
methods within the class, while methods can be declared as public, which means they can be 
called by any code that has a reference to the object.

Abstract classes:
An abstract class is a class that cannot be instantiated. Instead, it serves as a template 
or blueprint for other classes to inherit from. An abstract class can contain both abstract 
and non-abstract methods (abstract methods are methods that do not have any implementation, 
they just have a signature). Abstract classes are used to provide a common interface and 
implementation for a group of related classes. They are also used to define common behavior 
that must be implemented by all subclasses. A subclass that inherits from an abstract class 
is called a concrete class, and it must provide an implementation for all the abstract 
methods declared in the parent class.

Concrete classes:
A concrete class is a class that can be instantiated, meaning objects can be created from it. 
A concrete class is a class that provides an implementation for all of the abstract methods 
declared in its parent class, if it inherits from an abstract class. A concrete class can also 
be a class that does not inherit from an abstract class. Concrete classes are used to provide 
specific implementation details for a group of related classes that inherit from a common 
class. A concrete class can have its own methods and variables, and can also override the 
methods of its parent class.

Interfaces:
An interface is a contract or a set of methods that a class must implement. It defines a 
common set of methods that a class must provide, but it does not provide any implementation 
details. An interface can include both method signatures and constants.
Interfaces are used to define a common behavior for a group of related classes, and to provide 
a way for objects of different classes to be treated polymorphically. A class can implement 
multiple interfaces, but can only inherit from one base class.
