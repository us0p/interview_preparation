Execution Enrironment Lifecycle
The execution environment manages the resources required to run your 
function. The execution environment also provides lifecycle support for the
function's runtime and any external extensions associated with your 
function.

The function's runtime communicates with Lambda using the Runtime API. 
Extensions communicate with Lambda using the Extensions API. Extensions can
also receive log messages and other telemetry from the function by using 
the Telemetry API.

When you create your Lambda function, you specify configuration 
information, such as the amount of memory available and the maximum 
execution time allowed for your function. Lambda uses this information to 
set up the execution environment.
The function's runtime and each external extension are processes that run 
within the execution environment. Permissions, resources, credentials, and
environment variables are shared between the function and the extensions.

Each phase starts with an event that Lambda sends to the runtime and to all
registered extensions. The runtime and each extension indicate completion 
by sending a Next API request. Lambda freezes the execution environment 
when the runtime and each extension have completed and there are no pending
events.

Init phase
In the Init phase, Lambda performs three tasks:
- Start all extensions (Extension init)
- Bootstrap the runtime (Runtime init)
- Run the function's static code (Function init)
- Run any beforeCheckpoint runtime hooks (Lambda SnapStart only)
The Init phase ends when the runtime and all extensions signal that they 
are ready by sending a Next API request. The Init phase is limited to 10 
seconds. If all three tasks do not complete within 10 seconds, Lambda 
retries the Init phase at the time of the first function invocation with 
the configured function timeout.

Invoke phase
When a Lambda function is invoked in response to a Next API request, Lambda
sends an Invoke event to the runtime and to each extension.
The function's timeout setting limits the duration of the entire Invoke 
phase. For example, if you set the function timeout as 360 seconds, the 
function and all extensions need to complete within 360 seconds. Note that 
there is no independent post-invoke phase. The duration is the sum of all 
invocation time (runtime + extensions) and is not calculated until the 
function and all extensions have finished executing.
The invoke phase ends after the runtime and all extensions signal that they
are done by sending a Next API request.

Failures during the invoke phase
If the Lambda function crashes or times out during the Invoke phase, Lambda
resets the execution environment.
Suppose your function runs into an invoke failure (such as a function 
timeout or runtime error). When this happens, the Lambda service performs a
reset. The reset behaves like a Shutdown event. First, Lambda shuts down 
the runtime, then sends a Shutdown event to each registered external 
extension. The event includes the reason for the shutdown. If this 
environment is used for a new invocation, Lambda re-initializes the 
extension and runtime together with the next invocation.

Shutdown phase
When Lambda is about to shut down the runtime, it sends a Shutdown event to
each registered external extension. Extensions can use this time for final 
cleanup tasks. The Shutdown event is a response to a Next API request.
Duration: The entire Shutdown phase is capped at 2 seconds. If the runtime 
or any extension does not respond, Lambda terminates it via a signal 
(SIGKILL).
After the function and all extensions have completed, Lambda maintains the 
execution environment for some time in anticipation of another function 
invocation. However, Lambda terminates execution environments every few 
hours to allow for runtime updates and maintenance—even for functions that 
are invoked continuously. You should not assume that the execution 
environment will persist indefinitely.

When the function is invoked again, Lambda thaws the environment for reuse.
Reusing the execution environment has the following implications:
- Objects declared outside of the function's handler method remain 
  initialized, providing additional optimization when the function is 
  invoked again. For example, if your Lambda function establishes a 
  database connection, instead of reestablishing the connection, the 
  original connection is used in subsequent invocations. It's recommended 
  to add logic to check if a connection exists before creating a new one.
- Each execution environment provides between 512 MB and 10,240 MB, in 1-MB
  increments, of disk space in the /tmp directory. The directory content 
  remains when the execution environment is frozen, providing a transient 
  cache that can be used for multiple invocations. You can add extra code 
  to check if the cache has the data that you stored.
- Background processes or callbacks that were initiated by your Lambda 
  function and did not complete when the function ended resume if Lambda 
  reuses the execution environment. Make sure that any background processes
  or callbacks in your code are complete before the code exits.

When writing your Lambda function code, treat the execution environment as
stateless, assuming that it only exists for a single invocation. Lambda 
terminates execution environments every few hours to allow for runtime 
updates and maintenance—even for functions that are invoked continuously.
