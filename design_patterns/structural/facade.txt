Facade Pattern
It provides a simplified interface to a library, a framework, or any other 
complex set of classes.

Problem
Imagine that you must make your code work with a broad set of objects that 
belong to a sophisticated library or framework. Ordinarily, you’d need to 
initialize all of those objects, keep track of dependencies, execute 
methods in the correct order, and so on.
As a result, the business logic of your classes would become tightly 
coupled to the implementation details of 3rd-party classes, making it hard 
to comprehend and maintain.

Solution
A facade is a class that provides a simple interface to a complex subsystem
which contains lots of moving parts. A facade might provide limited 
functionality in comparison to working with the subsystem directly. 
However, it includes only those features that clients really care about.
Having a facade is handy when you need to integrate your app with a 
sophisticated library that has dozens of features, but you just need a 
tiny bit of its functionality.

Structure
1. The Facade provides convenient access to a particular part of the 
   subsystem’s functionality. It knows where to direct the client’s request
   and how to operate all the moving parts.
2. An Additional Facade class can be created to prevent polluting a single 
   facade with unrelated features that might make it yet another complex 
   structure. Additional facades can be used by both clients and other 
   facades.
3. The Complex Subsystem consists of dozens of various objects. To make 
   them all do something meaningful, you have to dive deep into the 
   subsystem’s implementation details, such as initializing objects in the 
   correct order and supplying them with data in the proper format.
   Subsystem classes aren’t aware of the facade’s existence. They operate 
   within the system and work with each other directly.
4. The Client uses the facade instead of calling the subsystem objects 
   directly.

Applicability
- Use the Facade pattern when you need to have a limited but 
  straightforward interface to a complex subsystem.
- Use the Facade when you want to structure a subsystem into layers.
  Create facades to define entry points to each level of a subsystem. You 
  can reduce coupling between multiple subsystems by requiring them to 
  communicate only through facades.
