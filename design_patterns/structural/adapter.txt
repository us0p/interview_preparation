Adapter

Allows objects with incompatible interfaces to collaborate.

Problem:
Imagine that you’re creating a stock market monitoring app. The app downloads 
the stock data from multiple sources in XML format and then displays 
nice-looking charts and diagrams for the user.
At some point, you decide to improve the app by integrating a smart 3rd-party 
analytics library. But there’s a catch: the analytics library only works with 
data in JSON format.
You can’t use the analytics library “as is” because it expects the data in a 
format that’s incompatible with your app.

Solution:
You can create an adapter. This is a special object that converts the interface
of one object so that another object can undertand it.
An adapter wraps one of the objects to hide the complexity of conversion happening 
behind the scenes. The wrapped object isn’t even aware of the adapter.
Adapters can not only convert data into various formats but can also help objects 
with different interfaces collaborate.
Sometimes it’s even possible to create a two-way adapter that can convert the calls 
in both directions.

Object Adapter Structure:
This implementation uses the object composition principle: the adapter implements 
the interface of one object and wraps the other one.

class Client
    - contains the existing business logic of the program.

interface ClientInterface:
    - describes a protocol that other classes must follow to be able to collaborate
      with the client code.
    - method(data)

class Service:
    - it's usually a class from a 3rd-party. The client can't use this class directly
      because it has an incompatible interface.
    - serviceMethod(specialData)

class Adapter extends Service implements ClientInterface: 
    - It's able to work with both the client and the service. It implements the client
      interface, while wrapping the service object. The adapter receives calls from
      the client via the current interface and traslates them into calls to the wrapped
      service object in a format it can understand.

Applicability:
- Use the Adapter class when you want to use some existing class, but its interface isn’t 
  compatible with the rest of your code.
  - The Adapter pattern lets you create a middle-layer class that serves as a translator 
    between your code and any other class with a weird interface.
- Use the pattern when you want to reuse several existing subclasses that lack some common 
  functionality that can’t be added to the superclass.
  - You could extend each subclass and put the missing functionality into new child classes. 
    However, you’ll need to duplicate the code across all of these new classes. The much more 
    elegant solution would be to put the missing functionality into an adapter class. Then you 
    would wrap objects with missing features inside the adapter, gaining needed features 
    dynamically. For this to work, the target classes must have a common interface, and the 
    adapter’s field should follow that interface.

Advantages:
- Single Responsibility Principle. You can separate the interface or data conversion code from 
  the primary business logic of the program.
- Open/Closed Principle. You can introduce new types of adapters into the program without breaking 
  the existing client code, as long as they work with the adapters through the client interface.

Disadvantages:
- The overall complexity of the code increases because you need to introduce a set of new interfaces 
  and classes. Sometimes it’s simpler just to change the service class so that it matches the rest 
  of your code.
