Decorator

Lets you attach new behaviors to objects by placing these objects 
inside special wrapper objects that contain the behaviors.

Problem:
You have a problem with a working solution but at some point you want
to add more solutions to the problem and you want to use a combination
of solutions durint run time. You can't use inheritance as it is static
and you can't change its behaviour during run-time.
In most languages you don't have multiple inheritance.

Solution:
You can use composition where one object has a reference to another and 
delegates it some work, whereas with inheritance, the object itself is 
able to do that work, inheriting the behavior from its superclass.
With this new approach you can easily substitute the linked “helper” object 
with another, changing the behavior of the container at runtime. An object 
can use the behavior of various classes, having references to multiple 
objects and delegating them all kinds of work.

“Wrapper” is the alternative nickname for the Decorator pattern that clearly 
expresses the main idea of the pattern. A wrapper is an object that can be 
linked with some target object. The wrapper contains the same set of methods 
as the target and delegates to it all requests it receives. However, the 
wrapper may alter the result by doing something either before or after it 
passes the request to the target.
The wrapper implements the same interface as the wrapped object. That’s why 
from the client’s perspective these objects are identical. Make the wrapper’s 
reference field accept any object that follows that interface. This will let 
you cover an object in multiple wrappers, adding the combined behavior of all 
the wrappers to it.

Structure:
interface Component:
    - Declares the common interface for both wrapper and wrapped objects.

class ConcreteComponent implements Component:
    - Is a class of objects being wrapped, it defines the basic behavior, which
      can be altered by decorators.

class BaseDecorator implements Component:
    - Has a field for referencing a wrapped component which should implement the
      component interface so it can contain both concrete components and decorators.
      The base decorator delegates all operations to the wrapped object.

class ConcreteDecorator extends BaseDecorator
    - Define extra behaviors that can be added to components dynamically.
      Concrete decorators override methods of the base decorator and execute their
      behavior either before or after calling the parent method.

Applicabillity:
- Use the Decorator pattern when you need to be able to assign extra behaviors to 
  objects at runtime without breaking the code that uses these objects.
  - The Decorator lets you structure your business logic into layers, create a 
    decorator for each layer and compose objects with various combinations of this 
    logic at runtime. The client code can treat all these objects in the same way, 
    since they all follow a common interface.
- Use the pattern when it’s awkward or not possible to extend an object’s behavior 
  using inheritance.
  - Many programming languages have the final keyword that can be used to prevent 
    further extension of a class. For a final class, the only way to reuse the 
    existing behavior would be to wrap the class with your own wrapper, using the 
    Decorator pattern.

Advantages:
- You can extend an object’s behavior without making a new subclass.
- You can add or remove responsibilities from an object at runtime.
- You can combine several behaviors by wrapping an object into multiple decorators.
- Single Responsibility Principle. You can divide a monolithic class that implements 
  many possible variants of behavior into several smaller classes.

Disadvantages:
- It’s hard to remove a specific wrapper from the wrappers stack.
- It’s hard to implement a decorator in such a way that its behavior doesn’t depend 
  on the order in the decorators stack.
- The initial configuration code of layers might look pretty ugly.
