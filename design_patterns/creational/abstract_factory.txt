Abstract Factoy

Is a creational design pattern that lets you produce families of related objects
without specifying their concrete classes.

Problem:
You have an application which has families of related products, where each product
can have a variation.
You need to crete individual furniture objects so that they match other objects of
the same family.
Also, you don't want to change existing code when adding new products or families 
of products to the program.

Solution:
This pattern suggests to explicitly declare interfaces for each distinct product
of the product family. Then you can make all variants of products follow those
interfaces.
Next, you declare the Abstract Factory - an interface with a list of creation
methods for all products that are part of the product family. These methods
must return abstract product types represented by the previously extracted
interfaces.
Finally, for each product variant in a family, we create a separate concrete 
factory class based on the Abstract Factory interface. A factory is a class 
that returns products of a particular kind which must implement the product
interface.

The client code has to work with both factories and products via their respective 
abstract interfaces. This lets you change the type of a factory that you pass to the 
client code, as well as the product variant that the client code receives, without 
breaking the actual client code.

Structure:
interface ProductA:
    - define signatures of products of a given familly.

interface ProductB:
    - define signatures of products of a given familly.

object ProductA1:
    - concrete implementation of variation of ProductA

object ProductA2:
    - concrete implementation of variation of ProductA

object ProductB1:
    - concrete implementation of variation of ProductB

object ProductB2:
    - concrete implementation of variation of ProductB

interface AbstractFactory:
    - declares a set of methods for creating each product of the family.
    - createProductA(): ProductA
    - createProductB(): ProductB

class ConcreteFactory1 implement AbstractFactory:
    - return concrete implementation of variation 1 of the family.
    - createProductA(): ProductA
    - createProductB(): ProductB

class ConcreteFactory2 implement AbstractFactory:
    - return concrete implementation of variation 2 of the family.
    - createProductA(): ProductA
    - createProductB(): ProductB

Applicability:
- Use when your code needs to work with various families of related products, but you 
  don’t want it to depend on the concrete classes of those products—they might be unknown 
  beforehand or you simply want to allow for future extensibility.
- Consider implementing the Abstract Factory when you have a class with a set of Factory 
  Methods that blur its primary responsibility.
  - In a well-designed program each class is responsible only for one thing. When a class 
    deals with multiple product types, it may be worth extracting its factory methods into 
    a stand-alone factory class or a full-blown Abstract Factory implementation.

Advantages:
- You can be sure that the products you’re getting from a factory are compatible with each 
  other.
- You avoid tight coupling between concrete products and client code.
- Single Responsibility Principle. You can extract the product creation code into one place, 
  making the code easier to support.
- Open/Closed Principle. You can introduce new variants of products without breaking existing 
  client code.

Disadvantages:
- The code may become more complicated than it should be, since a lot of new interfaces and 
  classes are introduced along with the pattern.
