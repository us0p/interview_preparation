Prototype Pattern
Is a creational design pattern that lets you copy existing objects without 
making your code dependent on their classes.

Problem
You need to create a copy of an object, but not all objects can be copied
"from the outside" (the object can have internal properties and methods).
There’s one more problem with the former approach. Since you have to know 
the object’s class to create a duplicate, your code becomes dependent on 
that class but, sometimes, you only know the interface that the object 
follows, but not its concrete class, when, for example, a parameter in a 
method accepts any objects that follow some interface.

Solution
The Prototype pattern delegates the cloning process to the actual objects 
that are being cloned. The pattern declares a common interface for all 
objects that support cloning. This interface lets you clone an object 
without coupling your code to the class of that object. Usually, such an 
interface contains just a single clone method.
An object that supports cloning is called a prototype. When your objects 
have dozens of fields and hundreds of possible configurations, cloning 
them might serve as an alternative to subclassing.

Structure
1. The Prototype interface declares the cloning methods. In most cases, 
   it’s a single clone method.
2. The Concrete Prototype class implements the cloning method. In addition 
   to copying the original object’s data to the clone, this method may also
   handle some edge cases of the cloning process related to cloning linked 
   objects, untangling recursive dependencies, etc.
3. The Client can produce a copy of any object that follows the prototype 
   interface.

Prototype registry implementation
The prototype registry is a structure that contains a set of pre-built 
frequently-used prototypes. When you need to clone a prototype instead of
cloning the object directly, you can clone directly from the registry.

Applicability:
- Use the Prototype pattern when your code shouldn’t depend on the concrete
  classes of objects that you need to copy.
  This happens a lot when your code works with objects passed to you from 
  3rd-party code via some interface. The concrete classes of these objects 
  are unknown, and you couldn’t depend on them even if you wanted to.
- Use the pattern when you want to reduce the number of subclasses that 
  only differ in the way they initialize their respective objects.
  Suppose you have a complex class that requires a laborious configuration 
  before it can be used. There are several common ways to configure this 
  class, and this code is scattered through your app. To reduce the 
  duplication, you create several subclasses and put every common 
  configuration code into their constructors. You solved the duplication 
  problem, but now you have lots of dummy subclasses.
  The Prototype pattern lets you use a set of pre-built objects configured 
  in various ways as prototypes. Instead of instantiating a subclass that 
  matches some configuration, the client can simply look for an appropriate
  prototype and clone it.
