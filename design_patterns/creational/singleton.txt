Singleton

Is a creational design pattern that lets you ensure that a class has
only one instance, while providing a global access point to this instance.

Problem:
This pattern violates the single responsibility principle as it solves
two problems at the same time:
- Ensure that a class has just a single instance, this is done when you
  want to control access to some shared resource like a database or file.
- Provide a global access point to that instance, this pattern lets you
  access some object from anywhere in the program. However, it also protects
  that instance from being overwritten by other code.

Solution:
- Make the default constructor private, to prevent other objects from using
  the new operator with the Singleton class.
- Create a static creation method that acts as a constructor. Under the hood,
  this method calls the private constructor to create an object and saves it
  in a static field. All following calls to this method return the cached object.

Structure:
class Singleton:
    - private static intance: Singleton
    - private constructor
    - public static getInstance(): Singleton
      - this method is responsible for creating a new instance and store it in the 
        private instance field, if the field already exist then it should return that
	field.

Applicability:
- Use the Singleton pattern when a class in your program should have just a 
  single instance available to all clients.
- Use the Singleton pattern when you need stricter control over global variables.
  - Unlike global variables, the Singleton pattern guarantees that thereâ€™s just 
    one instance of a class. Nothing, except for the Singleton class itself, can 
    replace the cached instance.

Advantages:
- You can be sure that a class has only a single instance.
- You gain a global access point to that instance.
- The singleton object is initialized only when it's requested for the first time.

Disadivantages:
- Violates the single responsibility principle, solve two problems at the same time.
- The Singleton pattern can mask bad design, for instance, when the components of
  the program know too much about each other.
- The pattern requires special treatment in a multithread environment so that 
  multiple threads won't create a singleton object several times.
- It may be difficult to unit test the client code of the Singleton because many
  test framework realy on inheritance when producing mock objects. Since the
  constructor of the singleton class is private and overriding static methods is
  impossible in most languages, you will need to think of a creative way to mock
  the singleton.
