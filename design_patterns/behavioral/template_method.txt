Template Method

Defines the skeleton of an algorithm in the superclass but lets subclasses 
override specific steps of the algorithm without changing its structure.

Problem:
You have a class which solves a problem but as you add different classes
with different sollutions, you start to have different classes with a
bunch of duplicated code and just some parts of different functionalities.
Also the client was built with a set of conditionals to select the correct
solution based on some criteria, adding more solutions will lead to changes
in the client.

Solution:
This pattern suggests that you break down an algorithm into a series of 
steps, turn these steps into methods, and put a series of calls to these 
methods inside a single template method. The steps may either be abstract, 
or have some default implementation. To use the algorithm, the client is 
supposed to provide its own subclass, implement all abstract steps, and 
override some of the optional ones if needed (but not the template method 
itself).
There’s another type of step, called hooks. A hook is an optional step with 
an empty body. A template method would work even if a hook isn’t overridden. 
Usually, hooks are placed before and after crucial steps of algorithms, 
providing subclasses with additional extension points for an algorithm.

Structure:
abstract class AbstractClass:
    - declares methods that act as steps of an algorithm, as well as the 
      actual template method which calls these methods in a specific order. 
      The steps may either be declared abstract or have some default 
      implementation.

class ConcreteClass extends AbstractClass:
    - can override all of the steps, but not the template method itself.

Applicability:
- Use the Template Method pattern when you want to let clients extend only 
  particular steps of an algorithm, but not the whole algorithm or its 
  structure.
- Use the pattern when you have several classes that contain almost 
  identical algorithms with some minor differences. As a result, you might 
  need to modify all classes when the algorithm changes.

Advantages:
- You can let clients override only certain parts of a large algorithm, 
  making them less affected by changes that happen to other parts of the 
  algorithm.
- You can pull the duplicate code into a superclass.

Disadvantages:
- Some clients may be limited by the provided skeleton of an algorithm.
- You might violate the Liskov Substitution Principle by suppressing a 
  default step implementation via a subclass.
- Template methods tend to be harder to maintain the more steps they have.
