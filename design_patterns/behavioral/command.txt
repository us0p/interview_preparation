Command - Action/Transaction

Turns a request into a stand-alone object that contains all information 
about the request. This transformation lets you pass requests as a method 
arguments, delay or queue a request’s execution, and support undoable 
operations.

Problem:
You have a class with a single functionality but can be used in many different
places. You can't create subclasses for each functionality as it would make
your code bloated. This can lead you to have many different subclasses implementing
the same functionality.
Finally if some of the behavior in these subclases are used in different contexts
your would have do duplicate the code or make different contexts deppendants on each
other.

Solution:
Good software design is often based on the principle of separation of concerns, which 
usually results in breaking an app into layers. The most common example: a layer for 
the graphical user interface and another layer for the business logic
GUI object calls a method of a business logic object, passing it some arguments. This 
process is usually described as one object sending another a request.
This pattern suggests that GUI objects shouldn’t send these requests directly. Instead, 
you should extract all of the request details, such as the object being called, the name 
of the method and the list of arguments into a separate command class with a single 
method that triggers this request.
Command objects serve as links between various GUI and business logic objects. From now 
on, the GUI object doesn’t need to know what business logic object will receive the 
request and how it’ll be processed. The GUI object just triggers the command, which 
handles all the details.
The next step is to make your commands implement the same interface. Usually it has just 
a single execution method that takes no parameters. This interface lets you use various 
commands with the same request sender, without coupling it to concrete classes of commands. 
As a bonus, now you can switch command objects linked to the sender, effectively changing 
the sender’s behavior at runtime.
A GUI object might have supplied the business-layer object with some parameters. Since 
the command execution method doesn’t have any parameters, how would we pass the request 
details to the receiver? It turns out the command should be either pre-configured with 
this data, or capable of getting it on its own.

Structure:
class Sender/Invoker:
    - is responsible for initiating requests. This class must have a field for storing 
      a reference to a command object. The sender triggers that command instead of 
      sending the request directly to the receiver. Note that the sender isn’t responsible 
      for creating the command object. Usually, it gets a pre-created command from the 
      client via the constructor.

interface Command:
    - can be an abstract class for defining subroutines a command must execute before
      performing a request.
    - must be abstract in the method which executes the request.

class ConcreteCommand implements Command:
    - implement a request. A concrete command isn’t supposed to perform 
      the work on its own, but rather to pass the call to one of the business logic objects. 
    - parameters required to execute a method on a receiving object can be declared as fields 
      in the concrete command. You can make command objects immutable by only allowing the 
      initialization of these fields via the constructor.
    - must maintain a field with a reference to a receiver instance.

class Receiver:
    - contains the business logic. Most commands only handle the details of how a request is 
      passed to the receiver, while the receiver itself does the actual work.

Applicability:
- Use the Command pattern when you want to parametrize objects with operations.
  - The Command pattern can turn a specific method call into a stand-alone object. This change 
    opens up a lot of interesting uses: you can pass commands as method arguments, store them 
    inside other objects, switch linked commands at runtime, etc.
- Use the Command pattern when you want to queue operations, schedule their execution, or execute 
  them remotely.
  - As with any other object, a command can be serialized, which means converting it to a string 
    that can be easily written to a file or a database. Later, the string can be rest
- Use the Command pattern when you want to implement reversible operations.

Advantages:
- Single Responsibility Principle. You can decouple classes that invoke operations from classes 
  that perform these operations.
- Open/Closed Principle. You can introduce new commands into the app without breaking existing 
  client code.
- You can implement reversible operations.
- You can implement deferred execution of operations.
- You can assemble a set of simple commands into a complex one.

Disadvantages:
- The code may become more complicated since you’re introducing a whole new layer between senders 
  and receivers.
