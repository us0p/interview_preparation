Strategy

Lets you define a family of algorithms, put each of them into a 
separate class, and make their objects interchangeable.

Problem:
You have a working solution where you apply an algorithmn for a
specific goal, as your application gets bigger you add different
algorithms for diferent forms of solving the problem.
In the end your main class is to big to maintain.

Solution:
This pattern suggests that you take a class that does something 
in a lot of different ways and extract all of these algorithms 
into separate classes called strategies.
The original class, called context, must have a field for storing 
a reference to one of the strategies. The context delegates the 
work to a linked strategy object instead of executing it on its 
own.
The context isn’t responsible for selecting an appropriate algorithm 
for the job. Instead, the client passes the desired strategy to the 
context. In fact, the context doesn’t know much about strategies. 
It works with all strategies through the same generic interface, which 
only exposes a single method for triggering the algorithm encapsulated 
within the selected strategy.
This way the context becomes independent of concrete strategies, so 
you can add new algorithms or modify existing ones without changing the 
code of the context or other strategies.

Structure:
class Context:
    - maintains a reference to one of the concrete strategies. It has a
      method for changing the strategy and a method to execute the current
      strategy.
    - the context doesn't know what type of strategy it works with or how
      the algorithm is executed.
    - Usually the context accepts a strategy through the constructor, and 
      also provides a setter so that the strategy can be switched at runtime.

interface Strategy:
    - This interface is common to all concrete strategies. It declares the
      context should use to execute the strategy.

class ConcreteStrategy implements Strategy:
    - implements different variations of an algorithm the context uses.

Applicability:
- Use the Strategy pattern when you want to use different variants of an 
  algorithm within an object and be able to switch from one algorithm to 
  another during runtime.
- Use the Strategy when you have a lot of similar classes that only differ 
  in the way they execute some behavior.
  - The Strategy pattern lets you extract the varying behavior into a separate 
    class hierarchy and combine the original classes into one, thereby reducing 
    duplicate code.
- Use the pattern to isolate the business logic of a class from the implementation 
  details of algorithms that may not be as important in the context of that logic.
  - The Strategy pattern lets you isolate the code, internal data, and dependencies 
    of various algorithms from the rest of the code. Various clients get a simple 
    interface to execute the algorithms and switch them at runtime.
- Use the pattern when your class has a massive conditional statement that switches 
  between different variants of the same algorithm.
  - The Strategy pattern lets you do away with such a conditional by extracting all 
    algorithms into separate classes, all of which implement the same interface. The 
    original object delegates execution to one of these objects, instead of implementing 
    all variants of the algorithm.

Advantages:
- You can swap algorithms used inside an object at runtime.
- You can isolate the implementation details of an algorithm from the code that uses it.
- You can replace inheritance with composition.
- Open/Closed Principle. You can introduce new strategies without having to change the context.

Disadvantages:
- If you only have a couple of algorithms and they rarely change, there’s no real reason to 
  overcomplicate the program with new classes and interfaces that come along with the pattern.
- Clients must be aware of the differences between strategies to be able to select a proper one.
- A lot of modern programming languages have functional type support that lets you implement 
  different versions of an algorithm inside a set of anonymous functions. Then you could use 
  these functions exactly as you’d have used the strategy objects, but without bloating your 
  code with extra classes and interfaces.
