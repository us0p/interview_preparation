State

Lets an object alter its behavior when its internal state changes. 
It appears as if the object changed its class.

Problem:
This pattern is closely related to the concept of Finite-State Machine.
The main idea is that, at any given moment, there’s a finite number of 
states which a program can be in. Within any unique state, the program 
behaves differently, and the program can be switched from one state to 
another instantaneously. However, depending on a current state, the 
program may or may not switch to certain other states. These switching 
rules, called transitions, are also finite and predetermined.

You can also apply this approach to objects. Imagine that we have a 
Document class. A document can be in one of three states: Draft, 
Moderation and Published. The publish method of the document works a 
little bit differently in each state:
- In Draft, it moves the document to moderation.
- In Moderation, it makes the document public, but only if the current 
  user is an administrator.
- In Published, it doesn’t do anything at all.
The biggest weakness of a state machine based on conditionals reveals 
itself once we start adding more and more states and state-dependent 
behaviors to the Document class. Most methods will contain monstrous 
conditionals that pick the proper behavior of a method according to the 
current state. Code like this is very difficult to maintain because any 
change to the transition logic may require changing state conditionals 
in every method.

Solution:
This pattern suggests that you create new classes for all possible 
states of an object and extract all state-specific behaviors into these 
classes.
Instead of implementing all behaviors on its own, the original object, 
called context, stores a reference to one of the state objects that 
represents its current state, and delegates all the state-related work 
to that object.
To transition the context into another state, replace the active state 
object with another object that represents that new state. This is 
possible only if all state classes follow the same interface and the 
context itself works with these objects through that interface.
This structure may look similar to the Strategy pattern, but there’s 
one key difference. In the State pattern, the particular states may be 
aware of each other and initiate transitions from one state to another, 
whereas strategies almost never know about each other.

Structure:
class Context:
    - stores a reference to one of the concrete state objects and
      delegates to it all state-specific work.
    - the context exposes a setter for passing it a new state object.

interface State:
    - declares the state specific methods.
    - these methods should make sense for all concrete states because
      you don't want some of your states to have useless methods
      that will never be called.

class ConcreteState implements State:
    - provide their own implementation for the state-specific methods.
    - to avoid duplication of similar code across multiple states,
      you may provide intermediate abstract classes that encapsulate
      some common behavior.
    - may store a backreference to the context object. Through this
      reference the state can fetch any required info from the context
      object, as well as initiate state transitions.
    - Both context and concrete states can set the next state of the 
      context and perform the actual state transition by replacing the 
      state object linked to the context.

Applicability:
- Use the State pattern when you have an object that behaves 
  differently depending on its current state, the number of states is 
  enormous, and the state-specific code changes frequently.
  - The pattern suggests that you extract all state-specific code into 
    a set of distinct classes. As a result, you can add new states or 
    change existing ones independently of each other, reducing the 
    maintenance cost.
- Use the pattern when you have a class polluted with massive 
  conditionals that alter how the class behaves according to the 
  current values of the class’s fields.
  - The State pattern lets you extract branches of these conditionals 
    into methods of corresponding state classes. While doing so, you 
    can also clean temporary fields and helper methods involved in 
    state-specific code out of your main class.
- Use State when you have a lot of duplicate code across similar 
  states and transitions of a condition-based state machine.
  - The State pattern lets you compose hierarchies of state classes and 
    reduce duplication by extracting common code into abstract base 
    classes.

Advantages:
- Single Responsibility Principle. Organize the code related to 
  particular states into separate classes.
- Open/Closed Principle. Introduce new states without changing existing 
  state classes or the context.
- Simplify the code of the context by eliminating bulky state machine 
  conditionals.

Disadvantages:
- Applying the pattern can be overkill if a state machine has only a few 
  states or rarely changes.
